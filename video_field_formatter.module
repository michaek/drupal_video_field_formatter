<?php 

function video_field_formatter_field_formatter_info() {
  $formatters['jwplayer'] = array(
    'label' => 'jwPlayer',
    'field types' => array('link_field', 'file'),
    'settings' => array(
      'video_duration' => '0',
      'video_start' => '0',
      'video_width' => 0,
      'video_height' => 0,
    ),
  );
  return $formatters;
}

function video_field_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  switch ($display['type']) {
    case 'jwplayer':
      $summary = t('Duration: @duration, Start: @start, Dimensions: @dimensions', array(
        '@duration' => $settings['video_duration'],
        '@start' => $settings['video_start'],
        '@dimensions' => $settings['video_width'] && $settings['video_height']
          ? $settings['video_width'] . 'x' . $settings['video_height']
          : 'auto'
      ));
      break;
  }

  return $summary;
}

function video_field_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  
  switch ($display['type']) {
    case 'jwplayer':
      drupal_add_js(libraries_get_path('jwplayer').'/jwplayer.js');
      drupal_add_js(drupal_get_path('module', 'video_field_formatter').'/video_field_formatter.js');
      drupal_add_js(array('video_field_formatter_jwplayer_url' => base_path().libraries_get_path('jwplayer').'/player.swf'), 'setting');

      foreach ($items as $delta => $item) {
        switch ($field['type']) {
          case 'link_field':
            $url = $item['url'];
            // TODO: abstract URL handling for providers
            $url = str_replace('youtu.be/', 'youtu.be/v/', $url);
            // $item_dump = print_r($item, TRUE);
            // $settings_dump = print_r($settings, TRUE);
            break;
          case 'file':
            // krumo($item);
            // krumo(field_view_value($entity_type, $entity, $field['field_name'], $item));
            // print ;
            $url = file_create_url($item['uri']);
            break;
        }

        $dom_id = drupal_html_id('video_'.$entity_type.'_'.entity_id($entity_type, $entity).'_'.$field['field_name'].'_'.$delta);
        // drupal_add_js('jwplayer("'.$dom_id.'").setup({flashplayer: "'.$player.'", file: "'.$url.'"'.$dimensions.'});', 'inline');
        $element[$delta] = array('#markup' => '<div id="'.$dom_id.'"></div>');
        drupal_add_js(array('video_field_formatter' => array($dom_id => $settings + array('url' => $url))), 'setting');
      }

      break;
  }
  
  return $element;
}

function video_field_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  switch ($display['type']) {
    case 'jwplayer':
      $element['video_duration'] = array(
        '#title' => t('Duration'), 
        '#type' => 'textfield', 
        '#size' => 20, 
        '#default_value' => $settings['video_duration'], 
        '#element_validate' => array('element_validate_integer'), 
        '#required' => FALSE,
      );
      $element['video_start'] = array(
        '#title' => t('Start'), 
        '#type' => 'textfield', 
        '#size' => 20, 
        '#default_value' => $settings['video_start'], 
        '#element_validate' => array('element_validate_integer'), 
        '#required' => FALSE,
      );
      $element['video_width'] = array(
        '#title' => t('Width'), 
        '#type' => 'textfield', 
        '#size' => 20, 
        '#default_value' => $settings['video_width'], 
        '#element_validate' => array('element_validate_integer'), 
        '#required' => FALSE,
      );
      $element['video_height'] = array(
        '#title' => t('Height'), 
        '#type' => 'textfield', 
        '#size' => 20, 
        '#default_value' => $settings['video_height'], 
        '#element_validate' => array('element_validate_integer'), 
        '#required' => FALSE,
      );
      break;
  }

  return $element;
}